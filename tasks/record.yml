# In this file variables starting with record are the objects retrieved from Digitalocean API, variables starting with entry are the objects retrieved from our vars.
#
## First of all, we need to check if the entry already exists and then if it needs to be updated or deleted
#

- name: check if entry needs to be created
  set_fact:
    create_entry: yes
  when: entry.state == 'present' and entry.name not in (domain_records_response.json.domain_records  | map(attribute="name") | list)

- name: check if entry needs to be deleted
  set_fact:
    delete_entry: yes
  when: entry.state == "absent" and entry.name in (domain_records_response.json.domain_records  | map(attribute="name") | list)

# We need to get the record object in case we want to update or delete the record
- name: Extract record_json
  set_fact:
    record_json: "{{ domain_records_response.json.domain_records|json_query(query)}}"
  vars:
    query: "[?name=='{{ entry.name }}']"
  when: entry.name in (domain_records_response.json.domain_records  | map(attribute="name") | list)

# the return type of the record_json object is a wrapped in an array, which is harder to parse later, with setting an extra fact we save the annoying .0, which I seem to miss often
- name: Get Record
  set_fact:
    record: "{{ record_json.0 }}"
  when: record_json is defined and record_json != ''

- name: check if entry needs to be updated
  set_fact:
    update_entry: yes
  # we need to check every property for differences, TODO SOA records seem to cause problems
  when: >
     entry.name in (domain_records_response.json.domain_records  | map(attribute="name") | list) and
     entry.state == "present" and
     (record.data != entry.data or record.ttl != entry.ttl or record.type != entry.type)
     and record.type != 'SOA'

- name: print REST Object retrieved for record {{ entry.name }}
  debug:
    msg: "{{ record_json.0 }}"
  when: debug and update_entry is defined and update_entry

- name: compare record to entry
  debug:
    msg: >
      record.data: "{{ record.data }}",
      entry.data: "{{ entry.data }}",
      record.name: "{{ record.name }}",
      entry.name: "{{ entry.name }}"
  when: debug and update_entry is defined and update_entry

# https://developers.digitalocean.com/documentation/v2/#create-a-new-domain-record
- name: Create new entry
  uri:
    method: POST
    url: "https://api.digitalocean.com/v2/domains/{{ item.domain }}/records"
    headers:
      authorization: Bearer {{ do_oauth_token }}
    body: '{{ create_record | to_json }}'
    body_format: json
    return_content: yes
    status_code: 201
  vars:
    create_record:
        data: "{{ entry.data }}"
        flags: null
        name: "{{ entry.name }}"
        port: null
        priority: "{{ entry.priority | default(10) }}"
        tag: null
        ttl: "{{ entry.ttl }}"
        type: "{{ entry.type }}"
        weight: null
  changed_when: true
  register: domain_record_creation_response_json
  failed_when: (domain_record_creation_response_json.failed) is true
  when: create_entry is defined and create_entry and entry.state == "present"

- name: print entry
  debug:
    msg: >
      entry.name: "{{ entry.name }}",
      entry.data: "{{ entry.data }}",
      entry.type: "{{ entry.type }}"
  when: debug

# https://developers.digitalocean.com/documentation/v2/#update-a-domain-record
- name: update entry
  uri:
    method: PUT
    url: "https://api.digitalocean.com/v2/domains/{{ item.domain }}/records/{{ record.id }}"
    headers:
      authorization: Bearer {{ do_oauth_token }}
    body: '{{ update_record | to_json }}'
    body_format: json
    return_content: yes
    status_code: 200
  vars:
    update_record:
        data: "{{ entry.data }}"
        name: "{{ entry.name }}"
        ttl: "{{ entry.ttl }}"
        type: "{{ entry.type }}"
        priority: "{{ entry.priority | default('null') }}"
  changed_when: true
  when: update_entry is defined and update_entry

# https://developers.digitalocean.com/documentation/v2/#delete-a-domain-record
- name: delete entry
  uri:
    method: DELETE
    url: "https://api.digitalocean.com/v2/domains/{{ item.domain }}/records/{{ record.id }}"
    headers:
      authorization: Bearer {{ do_oauth_token }}
    status_code: 204
  changed_when: true
  when: delete_entry is defined and delete_entry

# Ensure facts are cleared to empty strings to avoid strange behavior, unfortunately we can't undefine them
- name: clear facts
  set_fact:
    record_json: ''
    record: ''
    create_entry: ''
    update_entry: ''
    delete_entry: ''